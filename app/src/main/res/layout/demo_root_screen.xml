<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:ignore="HardcodedText">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="This app is a demonstration of Qureno architecture (a simplified version of Redux). Qureno stands for Queue-Reduce-Notify." />

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:baselineAligned="false"
            android:orientation="horizontal">

            <Button
                android:id="@+id/counter_demo"
                style="@style/TextAppearance.AppCompat.Widget.Button"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Counter" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="16dp"
                android:text="A simple example of a counter that can be increased or decreased. This example is the usual way to demonstrate Redux architecture basics." />

        </LinearLayout>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:baselineAligned="false"
            android:orientation="horizontal">

            <Button
                android:id="@+id/effect_demo"
                style="@style/TextAppearance.AppCompat.Widget.Button"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Effect" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="16dp"
                android:text="This example demonstrates how to perform 'effects' - I/O operations except View updates. For demonstration purposes we're showing a toast. Toast, strictly speaking, is a view but we can show it separately of view hierarchy." />

        </LinearLayout>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:baselineAligned="false"
            android:orientation="horizontal">

            <Button
                android:id="@+id/subscription_demo"
                style="@style/TextAppearance.AppCompat.Widget.Button"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Subscription" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="16dp"
                android:text="Subscription is the main way of working with entities that can emit values, such as services. Because Redux relies on immutable data it is not easy to keep subscription references and automatically dispose of them." />

        </LinearLayout>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:baselineAligned="false"
            android:orientation="horizontal">

            <Button
                android:id="@+id/vertical_demo"
                style="@style/TextAppearance.AppCompat.Widget.Button"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Vertical" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="16dp"
                android:text="The possibility to compose different pieces of program is something that Redux does not do well, however Qureno has some tools. In this demo we're using 3 instances of Counter component from the first example, simultaneously." />

        </LinearLayout>

    </LinearLayout>

</ScrollView>
